//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторного создания кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceChat
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceChat.IServiceChat", CallbackContract=typeof(ServiceChat.IServiceChatCallback))]
    internal interface IServiceChat
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Connect", ReplyAction="http://tempuri.org/IServiceChat/ConnectResponse")]
        System.Threading.Tasks.Task<ServiceChat.ConnectResponse> ConnectAsync(ServiceChat.ConnectRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Disconnect", ReplyAction="http://tempuri.org/IServiceChat/DisconnectResponse")]
        System.Threading.Tasks.Task<ServiceChat.DisconnectResponse> DisconnectAsync(ServiceChat.DisconnectRequest request);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SendMsg")]
        System.Threading.Tasks.Task SendMsgAsync(ServiceChat.SendMsg request);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    internal interface IServiceChatCallback
    {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/MsgCallback")]
        void MsgCallback(ServiceChat.MsgCallback request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Connect", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    internal partial class ConnectRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string name;
        
        public ConnectRequest()
        {
        }
        
        public ConnectRequest(string name)
        {
            this.name = name;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ConnectResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    internal partial class ConnectResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int ConnectResult;
        
        public ConnectResponse()
        {
        }
        
        public ConnectResponse(int ConnectResult)
        {
            this.ConnectResult = ConnectResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Disconnect", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    internal partial class DisconnectRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int id;
        
        public DisconnectRequest()
        {
        }
        
        public DisconnectRequest(int id)
        {
            this.id = id;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DisconnectResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    internal partial class DisconnectResponse
    {
        
        public DisconnectResponse()
        {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SendMsg", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    internal partial class SendMsg
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string msg;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int id;
        
        public SendMsg()
        {
        }
        
        public SendMsg(string msg, int id)
        {
            this.msg = msg;
            this.id = id;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MsgCallback", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    internal partial class MsgCallback
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string msg;
        
        public MsgCallback()
        {
        }
        
        public MsgCallback(string msg)
        {
            this.msg = msg;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    internal interface IServiceChatChannel : ServiceChat.IServiceChat, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    internal partial class ServiceChatClientBase : System.ServiceModel.DuplexClientBase<ServiceChat.IServiceChat>, ServiceChat.IServiceChat
    {
        
        /// <summary>
        /// Реализуйте этот разделяемый метод для настройки конечной точки службы.
        /// </summary>
        /// <param name="serviceEndpoint">Настраиваемая конечная точка</param>
        /// <param name="clientCredentials">Учетные данные клиента.</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ServiceChatClientBase(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance, ServiceChatClientBase.GetDefaultBinding(), ServiceChatClientBase.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_IServiceChat.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceChatClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration) : 
                base(callbackInstance, ServiceChatClientBase.GetBindingForEndpoint(endpointConfiguration), ServiceChatClientBase.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceChatClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(callbackInstance, ServiceChatClientBase.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceChatClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, ServiceChatClientBase.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceChatClientBase(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceChat.ConnectResponse> ConnectAsync(ServiceChat.ConnectRequest request)
        {
            return base.Channel.ConnectAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceChat.DisconnectResponse> DisconnectAsync(ServiceChat.DisconnectRequest request)
        {
            return base.Channel.DisconnectAsync(request);
        }
        
        public System.Threading.Tasks.Task SendMsgAsync(ServiceChat.SendMsg request)
        {
            return base.Channel.SendMsgAsync(request);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IServiceChat))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IServiceChat))
            {
                return new System.ServiceModel.EndpointAddress("net.tcp://localhost:8302/");
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ServiceChatClientBase.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_IServiceChat);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ServiceChatClientBase.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_IServiceChat);
        }
        
        public enum EndpointConfiguration
        {
            
            NetTcpBinding_IServiceChat,
        }
    }
    
    public class MsgCallbackReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public MsgCallbackReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public ServiceChat.MsgCallback request
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((ServiceChat.MsgCallback)(this.results[0]));
            }
        }
    }
    
    public partial class ServiceChatClient : ServiceChatClientBase
    {
        
        public ServiceChatClient(EndpointConfiguration endpointConfiguration) : 
                this(new ServiceChatClientCallback(), endpointConfiguration)
        {
        }
        
        private ServiceChatClient(ServiceChatClientCallback callbackImpl, EndpointConfiguration endpointConfiguration) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfiguration)
        {
            callbackImpl.Initialize(this);
        }
        
        public ServiceChatClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new ServiceChatClientCallback(), binding, remoteAddress)
        {
        }
        
        private ServiceChatClient(ServiceChatClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress)
        {
            callbackImpl.Initialize(this);
        }
        
        public ServiceChatClient() : 
                this(new ServiceChatClientCallback())
        {
        }
        
        private ServiceChatClient(ServiceChatClientCallback callbackImpl) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl))
        {
            callbackImpl.Initialize(this);
        }
        
        public event System.EventHandler<MsgCallbackReceivedEventArgs> MsgCallbackReceived;
        
        private void OnMsgCallbackReceived(object state)
        {
            if ((this.MsgCallbackReceived != null))
            {
                object[] results = ((object[])(state));
                this.MsgCallbackReceived(this, new MsgCallbackReceivedEventArgs(results, null, false, null));
            }
        }
        
        private class ServiceChatClientCallback : object, IServiceChatCallback
        {
            
            private ServiceChatClient proxy;
            
            public void Initialize(ServiceChatClient proxy)
            {
                this.proxy = proxy;
            }
            
            public void MsgCallback(ServiceChat.MsgCallback request)
            {
                this.proxy.OnMsgCallbackReceived(new object[] {
                            request});
            }
        }
    }
}
